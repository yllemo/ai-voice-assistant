[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-voice-assistant"
dynamic = ["version"]
description = "A powerful desktop application that combines voice recording, AI transcription, and intelligent chat capabilities"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AI Voice Assistant Team"},
]
maintainers = [
    {name = "AI Voice Assistant Team"},
]
keywords = [
    "voice",
    "assistant", 
    "ai",
    "transcription",
    "whisper",
    "speech-to-text",
    "chat",
    "lm-studio",
    "desktop",
    "gui",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
]
dependencies = [
    "pyaudio>=0.2.11",
    "openai-whisper>=20231117",
    "torch>=1.9.0,<3.0.0",
    "torchaudio>=0.9.0,<3.0.0",
    "requests>=2.25.1,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=4.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
build = [
    "pyinstaller>=5.0.0",
    "setuptools>=60.0.0",
    "wheel>=0.37.0",
]

[project.urls]
Homepage = "https://github.com/username/ai-voice-assistant"
Repository = "https://github.com/username/ai-voice-assistant"
Documentation = "https://github.com/username/ai-voice-assistant#readme"
Changelog = "https://github.com/username/ai-voice-assistant/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/username/ai-voice-assistant/issues"

[project.scripts]
ai-voice-assistant = "main:main"

[project.gui-scripts]
ai-voice-assistant-gui = "main:main"

[tool.setuptools_scm]
write_to = "_version.py"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["main"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=main",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-fail-under=70",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
